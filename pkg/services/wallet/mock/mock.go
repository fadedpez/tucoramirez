// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock/mock.go -package=mock_wallet_service
//
// Package mock_wallet_service is a generated GoMock package.
package mock_wallet_service

import (
	context "context"
	reflect "reflect"

	entities "github.com/fadedpez/tucoramirez/pkg/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// AddFunds mocks base method.
func (m *MockWalletService) AddFunds(ctx context.Context, userID string, amount int64, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFunds", ctx, userID, amount, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFunds indicates an expected call of AddFunds.
func (mr *MockWalletServiceMockRecorder) AddFunds(ctx, userID, amount, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFunds", reflect.TypeOf((*MockWalletService)(nil).AddFunds), ctx, userID, amount, description)
}

// GetOrCreateWallet mocks base method.
func (m *MockWalletService) GetOrCreateWallet(ctx context.Context, userID string) (*entities.Wallet, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateWallet", ctx, userID)
	ret0, _ := ret[0].(*entities.Wallet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateWallet indicates an expected call of GetOrCreateWallet.
func (mr *MockWalletServiceMockRecorder) GetOrCreateWallet(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateWallet", reflect.TypeOf((*MockWalletService)(nil).GetOrCreateWallet), ctx, userID)
}
